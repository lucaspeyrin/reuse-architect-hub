
import React, { useState, useEffect } from 'react';
import MainLayout from '../layouts/MainLayout';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Copy, RefreshCw, FileUp } from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Dialog, 
  DialogContent, 
  DialogFooter, 
  DialogHeader, 
  DialogTitle 
} from '@/components/ui/dialog';
import { createClient } from '@supabase/supabase-js';
import { useToast } from '@/hooks/use-toast';
import { useIsMobile } from '@/hooks/use-mobile';
import { Checkbox } from '@/components/ui/checkbox';

// Initialisation du client Supabase
const supabaseUrl = 'https://your-project.supabase.co';
const supabaseKey = 'your-anon-key';
const supabase = createClient(supabaseUrl, supabaseKey);

interface Rapport {
  id: string;
  title: string;
  project_title: string;
}

type ContentType = 'blog' | 'linkedin' | 'instagram' | 'facebook';

interface GeneratedContent {
  type: ContentType;
  content: string;
  imageUrl?: string;
}

const contentTypes: { value: ContentType; label: string }[] = [
  { value: 'blog', label: 'Blog' },
  { value: 'linkedin', label: 'LinkedIn' },
  { value: 'instagram', label: 'Instagram' },
  { value: 'facebook', label: 'Facebook' },
];

const GenerateContent: React.FC = () => {
  const [selectedContentTypes, setSelectedContentTypes] = useState<ContentType[]>(['blog']);
  const [activeContentTab, setActiveContentTab] = useState<ContentType>('blog');
  const [selectedRapport, setSelectedRapport] = useState('');
  const [customInstructions, setCustomInstructions] = useState('');
  const [generatedContents, setGeneratedContents] = useState<GeneratedContent[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [rapportsList, setRapportsList] = useState<Rapport[]>([]);
  const [isUploadDialogOpen, setIsUploadDialogOpen] = useState(false);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [uploadTitle, setUploadTitle] = useState('');
  const [isUploading, setIsUploading] = useState(false);
  const { toast } = useToast();
  const isMobile = useIsMobile();
  
  useEffect(() => {
    fetchRapports();
  }, []);
  
  useEffect(() => {
    // Quand selectedContentTypes change, s'assurer que activeContentTab est toujours valide
    if (selectedContentTypes.length > 0 && !selectedContentTypes.includes(activeContentTab)) {
      setActiveContentTab(selectedContentTypes[0]);
    }
  }, [selectedContentTypes, activeContentTab]);
  
  const fetchRapports = async () => {
    try {
      const { data, error } = await supabase
        .from('documents')
        .select(`
          id,
          title,
          projects:project_id (
            title
          )
        `)
        .eq('rapport', true);
      
      if (error) throw error;
      
      // Formatage des donn√©es pour la liste de rapports
      const formattedRapports: Rapport[] = data.map((item: any) => ({
        id: item.id,
        title: item.title,
        project_title: item.projects?.title || 'Projet inconnu',
      }));
      
      setRapportsList(formattedRapports);
    } catch (error) {
      console.error('Erreur lors du chargement des rapports:', error);
      
      // Donn√©es de secours
      setRapportsList([
        { id: 'r1', title: 'Diagnostic R√©emploi - Immeuble Haussmannien', project_title: 'R√©novation Immeuble Haussmannien' },
        { id: 'r2', title: '√âtude pr√©liminaire - Site industriel', project_title: 'D√©construction B√¢timent Industriel' },
        { id: 'r3', title: 'Diagnostic mat√©riaux - √âcole Jules Ferry', project_title: 'R√©habilitation √âcole Jules Ferry' },
      ]);
    }
  };
  
  const handleContentTypeChange = (type: ContentType) => {
    setSelectedContentTypes(prev => {
      if (prev.includes(type)) {
        // Retirer le type s'il est d√©j√† s√©lectionn√©
        const newTypes = prev.filter(t => t !== type);
        // S'assurer qu'il reste au moins un type s√©lectionn√©
        return newTypes.length > 0 ? newTypes : prev;
      } else {
        // Ajouter le type
        return [...prev, type];
      }
    });
  };
  
  const handleGenerate = async () => {
    if (!selectedRapport) {
      toast({
        title: "Erreur",
        description: "Veuillez s√©lectionner un rapport",
        variant: "destructive"
      });
      return;
    }
    
    if (selectedContentTypes.length === 0) {
      toast({
        title: "Erreur",
        description: "Veuillez s√©lectionner au moins un type de contenu",
        variant: "destructive"
      });
      return;
    }
    
    setIsGenerating(true);
    setGeneratedContents([]);
    
    try {
      // Appel au webhook pour g√©n√©rer le contenu
      const response = await fetch('https://api.ia2s.app/webhook/raedificare/rapport/content/suggestions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          rapport_id: selectedRapport,
          content_types: selectedContentTypes,
          instructions: customInstructions || undefined,
        }),
      });
      
      if (!response.ok) {
        throw new Error(`Erreur HTTP: ${response.status}`);
      }
      
      const result = await response.json();
      
      // Traitement des r√©ponses
      if (result.suggestions && Array.isArray(result.suggestions)) {
        const contents: GeneratedContent[] = result.suggestions.map((suggestion: any) => ({
          type: suggestion.content_type,
          content: suggestion.generated_content || '',
          imageUrl: suggestion.generated_image_url || undefined,
        }));
        
        setGeneratedContents(contents);
        
        // Activer le premier onglet disponible
        const availableTypes = contents.map(item => item.type);
        if (availableTypes.length > 0) {
          setActiveContentTab(availableTypes[0] as ContentType);
        }
      } else {
        // Si aucune suggestion n'est retourn√©e, g√©n√©rer du contenu de secours
        const defaultContents: GeneratedContent[] = selectedContentTypes.map(type => ({
          type,
          content: generateDefaultContent(type),
        }));
        
        setGeneratedContents(defaultContents);
        setActiveContentTab(selectedContentTypes[0]);
      }
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration du contenu:', error);
      toast({
        title: "Erreur",
        description: "Impossible de g√©n√©rer le contenu",
        variant: "destructive"
      });
      
      // Contenu de secours en cas d'erreur pour chaque type demand√©
      const fallbackContents: GeneratedContent[] = selectedContentTypes.map(type => ({
        type,
        content: generateDefaultContent(type),
      }));
      
      setGeneratedContents(fallbackContents);
      setActiveContentTab(selectedContentTypes[0]);
    } finally {
      setIsGenerating(false);
    }
  };
  
  // Fonction pour g√©n√©rer du contenu par d√©faut selon le type
  const generateDefaultContent = (type: ContentType): string => {
    switch (type) {
      case 'blog':
        return `# Le r√©emploi des mat√©riaux : une solution d'avenir pour le secteur du b√¢timent

Le secteur du b√¢timent est responsable de pr√®s de 70% des d√©chets produits en France. Face √† ce constat alarmant, le r√©emploi des mat√©riaux s'impose comme une solution innovante et durable. Chez RAEDIFICARE, nous nous engageons quotidiennement dans cette d√©marche.

## Pourquoi privil√©gier le r√©emploi ?

Le r√©emploi des mat√©riaux pr√©sente de nombreux avantages :
- R√©duction significative de l'empreinte carbone
- √âconomies financi√®res cons√©quentes
- Pr√©servation de mat√©riaux souvent de meilleure qualit√©
- Valorisation du patrimoine b√¢ti

## Notre expertise au service de votre projet

Notre √©quipe de diagnostiqueurs sp√©cialis√©s intervient sur l'ensemble du territoire pour identifier, caract√©riser et valoriser les mat√©riaux r√©employables dans vos projets de r√©novation ou de d√©molition.

Contactez-nous pour d√©couvrir comment RAEDIFICARE peut vous accompagner dans votre d√©marche d'√©conomie circulaire.`;
      
      case 'linkedin':
        return `üîÑ #√âconomieCirculaire | Saviez-vous que le secteur du b√¢timent g√©n√®re 70% des d√©chets en France ?

Chez RAEDIFICARE, nous transformons cette probl√©matique en opportunit√© gr√¢ce au r√©emploi des mat√©riaux. Notre dernier projet a permis de valoriser plus de 45 tonnes de mat√©riaux qui auraient autrement fini en d√©charge.

Notre √©quipe d'experts intervient sur l'ensemble du territoire pour diagnostiquer, caract√©riser et valoriser les mat√©riaux r√©employables dans vos projets.

‚úÖ R√©duction de l'empreinte carbone
‚úÖ √âconomies substantielles
‚úÖ Valorisation du patrimoine architectural

Le r√©emploi n'est pas seulement un geste √©cologique, c'est une d√©marche √©conomiquement viable et socialement responsable.

#R√©emploi #Mat√©riauxDurable #Construction #D√©veloppementDurable`;
      
      case 'instagram':
        return `üèóÔ∏è DONNER UNE SECONDE VIE AUX MAT√âRIAUX üèóÔ∏è

Ces magnifiques carreaux de ciment ont √©t√© sauv√©s d'une d√©molition et vont d√©sormais embellir un nouvel espace de vie !

Le r√©emploi, c'est la magie de transformer l'ancien en nouveau, l'histoire en avenir.

Chez @raedificare, nous sommes passionn√©s par la recherche et la valorisation de ces tr√©sors cach√©s dans les b√¢timents anciens.

‚Üí Swipe pour voir l'avant/apr√®s ! ‚Üê

#ReemploiMateriaux #EconomieCirculaire #Architecture #Renovation #PatrimoineBati #DeveloppementDurable #SecondLife #Upcycling`;
      
      case 'facebook':
        return `üîç RAEDIFICARE EN ACTION !

Notre √©quipe est intervenue cette semaine dans un h√¥tel particulier du 7√®me arrondissement de Paris en cours de r√©novation.

Nous avons identifi√© plus de 200m¬≤ de parquet ancien en ch√™ne massif, 12 portes d'√©poque en excellent √©tat, et plusieurs radiateurs en fonte ornement√©s qui m√©ritent une seconde vie !

Gr√¢ce √† notre r√©seau de partenaires, ces mat√©riaux d'exception seront r√©employ√©s dans d'autres projets, √©vitant ainsi pr√®s de 8 tonnes de d√©chets.

Le r√©emploi, c'est bon pour la plan√®te ET pour votre porte-monnaie ! üíöüí∞

üëâ Vous avez un projet de r√©novation ou de d√©molition ? Contactez-nous pour un diagnostic r√©emploi !`;
      
      default:
        return "Le contenu n'a pas pu √™tre g√©n√©r√©. Veuillez r√©essayer.";
    }
  };
  
  const getCurrentContent = () => {
    const content = generatedContents.find(item => item.type === activeContentTab);
    return content || { type: activeContentTab, content: '', imageUrl: undefined };
  };
  
  const handleCopyContent = () => {
    const content = getCurrentContent();
    navigator.clipboard.writeText(content.content);
    toast({
      title: "Copi√© !",
      description: "Le contenu a √©t√© copi√© dans le presse-papier",
    });
  };
  
  const handleUploadRapport = async () => {
    if (!selectedFile || !uploadTitle) {
      toast({
        title: "Erreur",
        description: "Veuillez s√©lectionner un fichier et entrer un titre",
        variant: "destructive"
      });
      return;
    }
    
    setIsUploading(true);
    
    try {
      const formData = new FormData();
      formData.append('rapports', selectedFile);
      formData.append('title', uploadTitle);
      
      // Appel au webhook d'ajout de rapport
      const response = await fetch('https://api.ia2s.app/webhook/raedificare/rapport/add', {
        method: 'POST',
        body: formData,
      });
      
      if (!response.ok) {
        throw new Error(`Erreur HTTP: ${response.status}`);
      }
      
      const result = await response.json();
      
      // Ajouter le rapport √† la liste locale
      const newRapport = {
        id: result.rapport_id || `new${Date.now()}`,
        title: uploadTitle,
        project_title: 'Nouveau projet',
      };
      
      setRapportsList(prev => [newRapport, ...prev]);
      setSelectedFile(null);
      setUploadTitle('');
      setIsUploadDialogOpen(false);
      
      toast({
        title: "Succ√®s",
        description: "Le rapport a √©t√© import√© avec succ√®s",
      });
    } catch (error) {
      console.error('Erreur lors de l\'upload du rapport:', error);
      toast({
        title: "Erreur",
        description: "Impossible d'importer le rapport",
        variant: "destructive"
      });
    } finally {
      setIsUploading(false);
    }
  };
  
  return (
    <MainLayout>
      <div className="flex justify-between items-center mb-8">
        <h1 className="page-title">G√©n√©rer du contenu</h1>
        <Button 
          onClick={() => setIsUploadDialogOpen(true)}
          variant="outline" 
          className="flex items-center gap-2"
        >
          <FileUp className="h-4 w-4" />
          <span>Importer un rapport</span>
        </Button>
      </div>
      
      <div className="grid md:grid-cols-2 gap-6">
        <div className="bg-white p-6 rounded-lg border border-neutral-200 shadow-sm">
          <h2 className="text-lg font-medium mb-4">Param√®tres du contenu</h2>
          
          <div className="space-y-4">
            <div>
              <Label className="mb-2 block">Types de contenu</Label>
              <div className="grid grid-cols-2 gap-3">
                {contentTypes.map((type) => (
                  <div key={type.value} className="flex items-center space-x-2">
                    <Checkbox 
                      id={`content-type-${type.value}`}
                      checked={selectedContentTypes.includes(type.value)}
                      onCheckedChange={() => handleContentTypeChange(type.value)}
                    />
                    <Label 
                      htmlFor={`content-type-${type.value}`}
                      className="cursor-pointer"
                    >
                      {type.label}
                    </Label>
                  </div>
                ))}
              </div>
            </div>
            
            <div>
              <Label htmlFor="rapport-select">Rapport source</Label>
              <Select value={selectedRapport} onValueChange={setSelectedRapport}>
                <SelectTrigger className="w-full mt-1" id="rapport-select">
                  <SelectValue placeholder="S√©lectionner un rapport" />
                </SelectTrigger>
                <SelectContent>
                  {rapportsList.map((rapport) => (
                    <SelectItem key={rapport.id} value={rapport.id}>
                      {rapport.title} ({rapport.project_title})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <Label htmlFor="instructions">Instructions personnalis√©es</Label>
              <Textarea
                id="instructions"
                placeholder="Instructions sp√©cifiques pour la g√©n√©ration du contenu..."
                value={customInstructions}
                onChange={(e) => setCustomInstructions(e.target.value)}
                className="mt-1"
                rows={3}
              />
            </div>
            
            <div className="pt-2">
              <Button 
                onClick={handleGenerate} 
                disabled={!selectedRapport || selectedContentTypes.length === 0 || isGenerating}
                className="w-full"
                style={{ backgroundColor: '#eb661a' }}
              >
                {isGenerating ? (
                  <>
                    <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                    G√©n√©ration en cours...
                  </>
                ) : 'G√©n√©rer le contenu'}
              </Button>
            </div>
          </div>
        </div>
        
        <div className="bg-white p-6 rounded-lg border border-neutral-200 shadow-sm">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-medium">Contenus g√©n√©r√©s</h2>
            {generatedContents.length > 0 && (
              <Button 
                variant="outline" 
                size="sm" 
                onClick={handleCopyContent}
                className="flex items-center gap-2"
              >
                <Copy className="h-3.5 w-3.5" />
                Copier
              </Button>
            )}
          </div>
          
          {generatedContents.length > 0 && (
            <div className="mb-3">
              <Tabs value={activeContentTab} onValueChange={(value) => setActiveContentTab(value as ContentType)}>
                <TabsList className="w-full grid grid-cols-4">
                  {selectedContentTypes.map((type) => {
                    const hasContent = generatedContents.some(content => content.type === type);
                    return (
                      <TabsTrigger 
                        key={type} 
                        value={type}
                        disabled={!hasContent}
                      >
                        {contentTypes.find(t => t.value === type)?.label}
                      </TabsTrigger>
                    );
                  })}
                </TabsList>
              </Tabs>
            </div>
          )}
          
          <div className="min-h-[400px] bg-neutral-50 rounded-md p-4 border border-neutral-200 overflow-y-auto">
            {isGenerating ? (
              <div className="flex flex-col items-center justify-center h-full text-neutral-500">
                <RefreshCw className="h-8 w-8 animate-spin mb-3" />
                <p>G√©n√©ration de votre contenu...</p>
              </div>
            ) : generatedContents.length > 0 ? (
              <div className="prose max-w-none">
                <div className="whitespace-pre-wrap">{getCurrentContent().content}</div>
                
                {getCurrentContent().imageUrl && (
                  <div className="mt-4">
                    <img 
                      src={getCurrentContent().imageUrl} 
                      alt="Illustration g√©n√©r√©e" 
                      className="max-w-full h-auto rounded-md" 
                    />
                  </div>
                )}
              </div>
            ) : (
              <div className="flex flex-col items-center justify-center h-full text-neutral-500">
                <p>Le contenu g√©n√©r√© appara√Ætra ici</p>
              </div>
            )}
          </div>
        </div>
      </div>
      
      {/* Dialog d'importation de rapport */}
      <Dialog open={isUploadDialogOpen} onOpenChange={setIsUploadDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Importer un rapport</DialogTitle>
          </DialogHeader>
          
          <div className="py-4">
            <div className="grid gap-4">
              <div className="grid gap-2">
                <Label htmlFor="rapport-title">Titre du rapport</Label>
                <Input
                  id="rapport-title"
                  value={uploadTitle}
                  onChange={(e) => setUploadTitle(e.target.value)}
                  placeholder="Rapport de diagnostic - Projet X"
                />
              </div>
              
              <div className="grid gap-2">
                <Label>Fichier du rapport</Label>
                <div
                  className="border-2 border-dashed border-neutral-300 rounded-md p-6 text-center"
                  onDragOver={(e) => e.preventDefault()}
                  onDrop={(e) => {
                    e.preventDefault();
                    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
                      setSelectedFile(e.dataTransfer.files[0]);
                    }
                  }}
                >
                  <input
                    id="rapport-file"
                    type="file"
                    className="hidden"
                    accept=".pdf,.doc,.docx"
                    onChange={(e) => {
                      if (e.target.files && e.target.files[0]) {
                        setSelectedFile(e.target.files[0]);
                      }
                    }}
                  />
                  <label 
                    htmlFor="rapport-file"
                    className="flex flex-col items-center cursor-pointer"
                  >
                    <FileUp className="h-8 w-8 text-neutral-400 mb-2" />
                    <span className="text-sm text-neutral-600 mb-1">
                      Glissez-d√©posez votre fichier ici
                    </span>
                    <span className="text-xs text-neutral-500">
                      ou cliquez pour parcourir
                    </span>
                  </label>
                </div>
                
                {selectedFile && (
                  <div className="text-sm text-neutral-600 mt-1">
                    <span className="font-medium">Fichier s√©lectionn√©:</span> {selectedFile.name}
                  </div>
                )}
              </div>
            </div>
          </div>
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsUploadDialogOpen(false)} disabled={isUploading}>
              Annuler
            </Button>
            <Button 
              onClick={handleUploadRapport} 
              disabled={!selectedFile || !uploadTitle || isUploading}
              style={{ backgroundColor: '#eb661a' }}
            >
              {isUploading ? 'Importation...' : 'Importer'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </MainLayout>
  );
};

export default GenerateContent;
